---
title: "IMDP 2024 Watercraft Inspection Stats"
title-slide-attributes:
  data-background-image: data/zm_backdrop.jpg
  data-background-size: contain
  data-background-opacity: "0.5"
author: "Martina Beck & Chris Madsen"
format: 
  revealjs:
    css: data/imdp_2023_style.css
    logo: data/co_service_crest.png
    footer: "2024 IMDP Meeting"
    self-contained: true
editor: visual
fig-responsive: false
---

```{r prep, include=F}
library(tidyverse)
library(openxlsx)
library(knitr)
library(sf)
library(plotly)

knitr::opts_chunk$set(echo = F,warning = F, message = F)

this_year = lubridate::year(lubridate::ymd(Sys.Date()))

big_text = theme_minimal() + 
  theme(axis.text.y = element_text(size = 13),
        axis.text.x = element_text(size = 13, angle = 45, hjust = 1, vjust = 1),
        axis.title = element_text(size = 16),
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        plot.title = element_text(hjust = 0.475, size = 18, face = 'bold', colour = 'black'))

# Read in options file.
my_opts = read_csv('C:/Users/CMADSEN/Downloads/LocalR/long_term_projects/ZQMussels/Options.csv')

# all_dat = openxlsx::read.xlsx(paste0(my_opts$zqm_figure_local_folder,'data/figure_dat_all.xlsx'))
# readr::write_csv(all_dat, paste0(my_opts$zqm_figure_local_folder,'data/figure_dat_all.csv'))
all_dat = vroom::vroom(paste0(my_opts$zqm_figure_local_folder,'data/figure_dat_all.csv'))

mf_dat = openxlsx::read.xlsx(paste0(my_opts$zqm_operations_data_folder,'Watercraft Inspection Data/2024 data/mussel_fouled_summary.xlsx')) |>
  set_names(snakecase::to_snake_case) 

# Number of people in party should be numeric, and we should use floor() on it.
all_dat = all_dat |> 
  mutate(Number_Of_People_In_Party = floor(as.numeric(Number_Of_People_In_Party)))

# Find number of unique years of data.
unique_years = unique(all_dat$Year)

# Find most recent year.
most_rec_year = max(as.numeric(all_dat$Year),na.rm=T)

# Station filter selection - only applied to certain figures!
permanent_stations = c("Golden","Yahk","Olsen (Hwy 3)","Mt. Robson","Osoyoos*","Pacific Border","Sumas Border","Dawson Creek","Cutts (Hwy 93)")

roving_stations = c("Penticton Roving","Fraser Valley Roving",
                    "Penticton 97C","Keremeos (Hwy 3)",
                    "Midway","Kaleden")
```

```{r replace_na_for_boat_source_jurisdiction}
all_dat = all_dat |> 
  dplyr::mutate(
    Previous_Waterbody_1_Province_Or_State = ifelse(
      is.na(Previous_Waterbody_1_Province_Or_State),
      'No Data',
      Previous_Waterbody_1_Province_Or_State))
```

```{r pull_out_station_details_like_boat_launch_names_etc}

# Stations Labels
station_labels = tibble(name = c('Olsen','Osoyoos','Pacific'),
       label = c('Olsen (Hwy 3)','Osoyoos*','Pacific Border'))

# Replace original station names with labels.
all_dat = all_dat |> 
  rowwise() |> 
  mutate(Station = ifelse(Station %in% station_labels$name,
                          station_labels[station_labels$name == Station,]$label,
                          Station)) |> 
  dplyr::ungroup()

# Pull out different boat launches, scheduled inspections, etc. from,
# mostly, Penticton Roving and Fraser Valley Roving.
all_dat = all_dat |> 
  dplyr::mutate(Station = dplyr::case_when(
    # Pull out boat launches.
    # 1. Scheduled Inspections / Decons
    Station %in% c("Fraser Valley Roving","Penticton Roving") & str_detect(Shift_Start_Comment, '([iI]nspection|[dD]econ|[dD]eacon|Deco|[sS]cheduled)') ~ 'Scheduled Inspection/Decontamination',
    Station == 'Scheduled Inspection' & str_detect(Shift_Start_Comment,"([r,R]ichmond|[d,D]ockside)") ~ 'Lower Mainland Scheduled Inspection',
    Station == 'Scheduled Inspection' & str_detect(Shift_Start_Comment,"([l,L]ake [c,C]ountry|[l,L]akehouse|Martin|martin|MARTIN|[p,P]enticton|[k,K]elowna)") ~ 'Penticton Scheduled Inspection',
    # 2. Multiple boat launches visited...
    str_detect(Shift_Start_Comment,"([kK]ekuli|[kK]akuli).*([gG]elatley|[gG]ellatley)") ~ 'Multiple',
    str_detect(Shift_Start_Comment,"([gG]elatley|[gG]ellatley).*([kK]ekuli|[kK]akuli)") ~ 'Multiple',
    str_detect(Shift_Start_Comment,"Skaha") & str_detect(Shift_Start_Comment,"summerland")~ "Boat Launch - Multiple",
    # 3. Single boat launch visited.
    # Okanagan Boat Launch mentions Kelowna and then kabuki bay, Eldorado boat launch, etc.
    str_detect(Shift_Start_Comment,".*kabuki bay.*Eldorado") ~ 'Boat Launch - Okanagan Lake',
    str_detect(Shift_Start_Comment,"([kK]ekuli|[kK]akuli)") ~ 'Boat Launch - Kekuli Bay',
    str_detect(Shift_Start_Comment,"([gG]ellatly|[gG]ellatley)") ~ 'Boat Launch - Gellatly Bay',
    str_detect(Shift_Start_Comment,"([cC]ultus)") ~ 'Boat Launch - Cultus Lake',
    str_detect(Shift_Start_Comment,"([aA]l(l)?ouette)") ~ 'Boat Launch - Alouette Lake',
    str_detect(Shift_Start_Comment,"([sS]tave)") ~ 'Boat Launch - Stave Lake',
    str_detect(Shift_Start_Comment,"([kK]awkawa)") ~ 'Boat Launch - Kawkawa Lake',
    str_detect(Shift_Start_Comment,"[cC]hristina") ~ "Boat Launch - Christina Lake",
    Station == 'Christina Lake' ~ 'Boat Launch - Christina Lake',
    str_detect(Shift_Start_Comment,"[sS]kaha") ~ "Boat Launch - North Skaha",
    str_detect(Shift_Start_Comment,"[pP]each") ~ "Boat Launch - Peachland Yacht Club",
    str_detect(Shift_Start_Comment,"(Summerland|summer( )?land|Summer( )?[lL]and)") ~ "Boat Launch - Summerland",
    # No specific boat launch mentioned, but the words "boat launch" mentioned.
    stringr::str_detect(Shift_Start_Comment,"[bB]oat( )?[lL]aunch") ~ 'Boat Launch',
    # Pull out specific stations
    str_detect(Shift_Start_Comment, '(hwy|Hwy)?( )?97( )?[cC]') ~ 'Penticton 97C',
    str_detect(Shift_Start_Comment, '(hwy|Hwy)( )?3') ~ 'Hwy 3',
    str_detect(Shift_Start_Comment, '[kK]eremeos') ~ 'Keremeos (Hwy 3)',
    T ~ Station
  ))
```

```{r add_hour_field_to_all_dat}
all_dat = all_dat |> 
  mutate(Inspection_Hour = lubridate::hour(TimeOfInspection))
```

```{r calculate_max_inspections_per_day}
stations_for_max_insp_calc = c("Golden","Yahk","Olsen (Hwy 3)","Radium","Mt. Robson","Osoyoos*","Pacific Border","Sumas Border","Dawson Creek","Penticton Roving","Fraser Valley Roving","Keremeos (Hwy 3)","Penticton 97C","Fraser Valley Cultus","Cutts (Hwy 93)")

# max_per_day = max_per_day |> 
#   mutate(TimeOfInspection = openxlsx::convertToDateTime(TimeOfInspection))

max_per_day = all_dat |>
  filter(Station %in% stations_for_max_insp_calc) |>
  filter(Year %in% c(most_rec_year)) |> 
  # filter(Year %in% c(2020:most_rec_year)) |> 
  select(Station, Year, TimeOfInspection) |> 
  mutate(Day = lubridate::yday(TimeOfInspection)) |> 
  # group_by(Station, Year, Day) |> 
  # reframe(n = n(),
  #         Day) |> 
  count(Station, Year, Day) |>
  group_by(Station, Year) |>
  slice_max(n) |>
  mutate(Year = as.character(Year)) |>
  mutate(Year = factor(Year, levels = c(2020:most_rec_year))) |>
  dplyr::ungroup()

max_per_day = max_per_day |> 
  dplyr::group_by(Station) |> 
  dplyr::mutate(station_total = sum(n)) |> 
  dplyr::ungroup() |> 
  arrange(desc(station_total), Year) |> 
  mutate(Station = as.factor(Station)) |>
  mutate(Station = forcats::fct_inorder(Station))

# Pull out month and day from doy field.
max_per_day = max_per_day |>
  mutate(DOY = Day) |> 
  mutate(date = as.Date(Day-1, origin=paste0(Year, "-01-01"))) |> 
  mutate(Month = lubridate::month(date,abbr=T,label=T)) |> 
  mutate(Day = lubridate::day(date))

```

```{r summary_table}
summ_table = all_dat |> 
  group_by(Year) |> 
  summarise(
    `Total Watercraft Inspected` = n(),
    `People Interactions` = sum(Number_Of_People_In_Party,na.rm=T),
    `High Risk` = sum(High_Risk_AIS_Ind,na.rm=T),
    `Commercially Hauled` = sum(Commercially_Hauled_Ind,na.rm=T),
    `Decontaminations Performed` = sum(Decontamination_Performed_Ind,na.rm=T),
    `Decontamination Orders` = sum(Decontamination_order_issued_Ind,na.rm=T),
    `Quarantine Periods` = sum(Quarantine_Period_Issued_Ind,na.rm=T),
    `Mussel Fouled` = sum(MusselsFound_Ind,na.rm=T),
    `Total Boats at Night*` = sum(Inspection_Hour >= 22 | Inspection_Hour <= 5),
    `High-risk Boats at Night*` = sum((Inspection_Hour >= 22 | Inspection_Hour <= 5) & High_Risk_AIS_Ind),
    `Mussel-fouled Boats at Night*` = sum((Inspection_Hour >= 22 | Inspection_Hour <= 5) & MusselsFound_Ind)
    )

# Some numbers are way off. Let's correct these by hand, though it pains me to do it!
summ_table[summ_table$Year == 2021,'High Risk'] <- 244 # was 364
summ_table[summ_table$Year == 2017,'Total Boats at Night*'] <- 121 # was 5625
summ_table[summ_table$Year == 2018,'Total Boats at Night*'] <- 391 # was 628
summ_table[summ_table$Year == 2019,'Total Boats at Night*'] <- 472
summ_table[summ_table$Year == 2017,'High-risk Boats at Night*'] <- 7 # was 331
summ_table[summ_table$Year == 2015,'Mussel Fouled'] <- 15 # was 11
# summ_table[summ_table$Year == 2015,'Advanced Notification'] <- 7 # was 0
# summ_table[summ_table$Year == 2016,'Tickets'] <- 7 # was 0
# summ_table[summ_table$Year == 2016,'Warnings'] <- 7 # was 0

summ_table = summ_table |> 
  left_join(
    tibble(
      Year = c(2015:most_rec_year),
      `Advanced Notification` = c(7,10,20,20,16,13,7,7,6,5),
      Tickets = c(NA,46,59,82,113,101,85,63,NA,NA),
      Warnings = c(NA,36,86,50,113,76,45,66,NA,NA)
    )
  ) |> 
  mutate(across(c("Total Watercraft Inspected","People Interactions"), \(x) round(x,-2)))

# Flip to have years on top row.
summ_table = t(summ_table) |> 
  as.data.frame()

names(summ_table) = summ_table[1,]

summ_table$vars = row.names(summ_table)

row.names(summ_table) = NULL

summ_table = summ_table |> 
  filter(vars != 'Year') |> 
  select(vars, everything()) |> 
  mutate(across(everything(), \(x) as.character(x))) |> 
  mutate(across(everything(), \(x) replace_na(x, '?')))

summ_table = summ_table |> 
  rename(" " = "vars")

summ_table[8,"2024"] <- "10*" # Martina and I are still looking for an eleventh mussel-fouled record for 2024; this asterisk is for today's presentation.
```

## Summary Table

```{r, fig.width=12}
# kableExtra::kbl(summ_table, table.attr = "style='width:90%'") |> 
#   kableExtra::kable_styling(full_width = F)
kableExtra::kbl(summ_table, format = "html", table.attr = "style='width:50%';font-size=10px;") |> 
  kableExtra::kable_paper(full_width = T) |> 
  kableExtra::kable_minimal()
```

## Summary Table

```{r}
# kableExtra::kbl(summ_table) |> 
kableExtra::kbl(summ_table, format = "html", table.attr = "style='width:50%';font-size=10px;") |> 
  kableExtra::kable_paper(full_width = T) |> 
  kableExtra::kable_minimal() |> 
  kableExtra::column_spec(ncol(summ_table), 
                          color = "black", 
                          bold = T,
                          background = 'lightblue')
```

\*22:00 - 05:00

## Total Inspections - Permanent Stations 2024

```{r make_bargraph_with_labels_function}
make_bar_with_lbls = function(data,y_var_label,
                              station_filter,year_filter,
                              x_var = 'Station',
                              reorder_x_by_y = T,
                              fill_var = 'Year',
                              label_cutoff,
                              highlight_field = NA,
                              ggplotify = TRUE,
                              add_sep_lines = F){
  
  if(length(station_filter) > 1 | station_filter[1] != 'none'){
    plot_dat = data |> 
      filter(Station %in% station_filter)
  } else {
    plot_dat = data
  }
  plot_dat_sum = plot_dat |> 
    filter(Year %in% year_filter) |> 
    mutate(Year = as.character(Year)) |> 
    mutate(Year = factor(Year, levels = year_filter)) |> 
    dplyr::mutate(Station = str_replace_all(Station," (?=\\()","\n")) |> 
    count(Year,!!rlang::sym(x_var)) |> 
    group_by(!!rlang::sym(x_var)) |> 
    mutate(station_total = sum(n)) |> 
    ungroup()
  
  if(reorder_x_by_y){
    plot_dat_sum = plot_dat_sum |> 
      arrange(desc(station_total)) |> 
      mutate(!!rlang::sym(x_var) := as.factor(!!rlang::sym(x_var))) |> 
      mutate(!!rlang::sym(x_var) := forcats::fct_inorder(!!rlang::sym(x_var)))
  }
  
  text_labels = plot_dat_sum |> 
    dplyr::mutate(text_label = ifelse(n <= label_cutoff, n, NA))
  
  if(is.na(highlight_field)){
    ggplot_fig = plot_dat_sum |> 
      ggplot(aes(x = !!rlang::sym(x_var), y = n, 
                 group = Year, fill = !!rlang::sym(fill_var))) + 
      geom_col(position='dodge') + 
      geom_text(position=position_dodge(width = .9),
                aes(y = n + 0.05*max(plot_dat_sum$n), 
                    group = Year, label = text_label),
                data = text_labels) + 
      scale_fill_brewer(palette = 'Set3') +
      big_text +
      labs(y = y_var_label, x = '')
  }
  
  if(!is.na(highlight_field)){
    highlight_dat = plot_dat |> 
      dplyr::filter(!!rlang::sym(highlight_field)) |> 
      dplyr::mutate(Station = str_replace_all(Station," (?=\\()","\n")) |> 
      filter(Year %in% year_filter) |> 
      mutate(Year = as.character(Year)) |> 
      mutate(Year = factor(Year, levels = year_filter)) |> 
      count(Year,!!rlang::sym(x_var),name = "highlight_field") |> 
      group_by(!!rlang::sym(x_var)) |> 
      mutate(hl_station_total = sum(highlight_field)) |> 
      ungroup()
    
    if(reorder_x_by_y){
      highlight_dat = highlight_dat |> 
        arrange(desc(hl_station_total)) |> 
        mutate(!!rlang::sym(x_var) := as.factor(!!rlang::sym(x_var))) |> 
      mutate(!!rlang::sym(x_var) := forcats::fct_inorder(!!rlang::sym(x_var)))
    }
    
    ggplot_fig = plot_dat_sum |> 
      dplyr::left_join(highlight_dat) |> 
      dplyr::mutate(highlight_field = tidyr::replace_na(highlight_field,0)) |> 
      ggplot(aes(x = !!rlang::sym(x_var), group = Year)) + 
      geom_col(aes(y=n), fill = 'red', position='dodge') + 
      geom_col(aes(y=n-highlight_field, fill = !!rlang::sym(fill_var)), position='dodge') + 
      geom_col(aes(y=n-highlight_field), fill = 'white', alpha = 0.6, position='dodge') + 
      geom_text(position=position_dodge(width = .9),
                aes(y = n + 0.05*max(plot_dat_sum$n), 
                    group = Year, label = ifelse(
                  highlight_field/n == 1,
                  paste0(100*round(highlight_field/n,3),"% (",Year,")"),
                  paste0(100*round(highlight_field/n,3),"%")))
                ) + 
      scale_fill_brewer(palette = 'Set3') +
      big_text +
      labs(y = y_var_label, x = '') +
      guides(fill = guide_legend(override.aes = list(alpha = 0.6)))
    
  }
  
  if(add_sep_lines){
    ggplot_fig = ggplot_fig + 
      facet_wrap(as.formula(paste("~", x_var)), nrow = 1, scales = 'free_x', strip.position = "bottom") + 
      theme(axis.text.x = element_blank(),
            axis.ticks.x = element_blank(),
            panel.border = element_rect(color = 'grey', fill = 'transparent'),
            strip.text = element_text(size = 14, angle = 45, margin = margin(r = 15)),
            strip.clip = "off")
  }

  if(!ggplotify){
    return(ggplot_fig)
  }
  if(ggplotify){
    return(
      ggplotly(
        ggplot_fig,
        width = 1000,
        height = 600
      )
    )
  }
}
```

```{r make_pie_function}
library(ggrepel)

make_pie = function(dat, variable){
  dat |> 
    ungroup() |> 
    count(!!sym(variable)) |> 
    arrange(desc(!!sym(variable))) |>  
    mutate(lab.ypos = cumsum(n) - 0.5*n) |> 
    mutate(prop = paste0(round(100*(n / sum(n)), 0), "%")) |> 
  ggplot(aes(x = "", y = n, 
             fill = !!sym(variable))) +
    geom_bar(width = 1, stat = "identity", color = "white") +
    coord_polar("y", start = 0)+
    geom_text_repel(aes(y = lab.ypos, x = 1.49, label = paste0(!!sym(variable),"\n",n)), 
                    color = "black",
                    size = 5,
                    nudge_x=0.4) +
    geom_text(aes(y = lab.ypos, x = 1.49 / 2, label = prop), 
                    color = "white",
                    size = 4,
                    nudge_x=0.4) +
    theme_void() + 
    scale_fill_brewer(palette = "Set3") + 
    labs(fill = variable) + 
    theme(legend.position = 'none',
          plot.title = element_text(hjust = 0.475, size = 18, face = 'bold', colour = 'black'))
}
```

```{r make_sure_station_names_are_capitalized_etc}
all_dat = all_dat |> 
  dplyr::mutate(Station = str_replace_all(Station, "Cbsa", "CBSA")) |> 
  dplyr::mutate(Station = str_replace_all(Station, "Ab Notification", "AB Notification")) |> 
  dplyr::mutate(Station = str_replace_all(Station, "Bc Notification", "BC Notification")) |> 
  dplyr::mutate(Station = str_replace_all(Station, "CBSA Referral", "CBSA Notification")) |> 
  dplyr::mutate(Station = str_replace_all(Station,"Rapp Notification","RAPP Notification")) #|> 
  # Look for location keywords that can help us split 'Scheduled Inspection' into either Lower Mainland or Penticton.
  # dplyr::mutate(Station = dplyr::case_when(
  #   Station == 'Scheduled Inspection' & str_detect(Shift_Start_Comment,"([r,R]ichmond|[d,D]ockside)") ~ 'Lower Mainland Scheduled Inspection',
  #   Station == 'Scheduled Inspection' & str_detect(Shift_Start_Comment,"([l,L]ake [c,C]ountry|[l,L]akehouse|Martin|martin|MARTIN|[p,P]enticton|[k,K]elowna)") ~ 'Penticton Scheduled Inspection',
  #   T ~ Station
  # ))
```

```{r extract_data_for_this_year}
d = all_dat[all_dat$Year==2024,]
```

```{r total_inspections}
make_bar_with_lbls(
  data = all_dat |> dplyr::filter(!High_Risk_AIS_Ind),
  y_var_label = "Total Inspections",
  fill_var = "Station",
  label_cutoff = 100,
  station_filter = permanent_stations,
  year_filter = 2024
  # year_filter = c(2021:most_rec_year)
)
```

<em>\*For 2021 only, Osoyoos includes Penticton roving crew and stats from Keremeos, Greenwood, Kaleden and boat launch data.</em>

## Total Inspections - Roving Stations (2024)

```{r}
make_bar_with_lbls(
  data = all_dat,
  y_var_label = "Total Inspections",
  fill_var = "Station",
  label_cutoff = 50,
  station_filter = roving_stations,
  # year_filter = c(2021:most_rec_year)
  year_filter = 2024
)
```

## Total Inspections - Boat Launches (2024)

```{r}
all_dat |> 
  dplyr::filter(str_detect(Station,'Boat Launch')) |> 
  dplyr::mutate(Station = str_remove_all(Station,"Boat Launch - ")) |> 
  dplyr::filter(!Station %in% c("Multiple")) |> 
  dplyr::mutate(Station = str_replace(Station,"Boat Launch","Unspecified Boat Launch")) |> 
  make_bar_with_lbls(
    y_var_label = "Total Inspections",
    fill_var = "Station",
    label_cutoff = 5,
    station_filter = 'none',
    year_filter = 2024
  )
```

## Total Inspections - Scheduled Inspections (2024)

```{r}
all_dat |> 
  dplyr::filter(str_detect(Station,"Scheduled")) |> 
  dplyr::mutate(Station = str_replace_all(Station, 'Scheduled Inspection', 'Sched. Insp.')) |>
  # mutate(Station = str_remove_all(Station, '(\\/|\\(|\\))')) |> 
  make_bar_with_lbls(
    y_var_label = "Total Inspections",
    fill_var = "Station",
    label_cutoff = 10,
    station_filter = 'none',
    year_filter = 2024
    # year_filter = c(2021:most_rec_year)
  )
```

## Source Provinces/States (2024)

```{r}
sources_sum = d |> 
  ungroup() |> 
  dplyr::rename(boat_source = Previous_Waterbody_1_Province_Or_State) |> 
  dplyr::select(boat_source) |> 
  mutate(boat_source = as.factor(boat_source)) |> 
  mutate(boat_source = forcats::fct_lump(boat_source, n = 15)) |> 
  count(boat_source) |> 
  dplyr::arrange(-n) |> 
  mutate(total = nrow(d)) |> 
  mutate(prop = paste0(round(100*n/total,1), "%"))

sources_sum |> 
  filter(boat_source != 'Other') |> 
  bind_rows(sources_sum |> filter(boat_source == 'Other')) |> 
  mutate(boat_source = fct_inorder(boat_source)) |> 
  ggplot() + 
  geom_col(aes(x = boat_source, y = n)) + 
  geom_text(aes(x = boat_source, y = n + 0.08*max(n), label = n),data = sources_sum, fontface = 'bold') +
  geom_text(aes(x = boat_source, y = n + 0.02*max(n), label = prop),data = sources_sum) +
  geom_text(aes(x = "TX", y = max(n), label = paste0("Total Inspections: ",scales::comma(total))), data = sources_sum[1,]) +
  labs(y = 'Count', x = 'Source Province/State') + 
  big_text
```

## Percent High Risk Inspections - Permanent Stations (2024)

```{r}
all_dat |> 
  dplyr::mutate(Station = str_replace_all(Station, " ","\n")) |> 
  make_bar_with_lbls(
  y_var_label = "Total Inspections",
  fill_var = "Station",
  station_filter = str_replace_all(permanent_stations, " ","\n"),
  year_filter = 2024,
  # year_filter = c((this_year-1):this_year),
  label_cutoff = 0,
  highlight_field = "High_Risk_AIS_Ind",
  ggplotify = F,
  add_sep_lines = T
) + theme(strip.text = element_text(size = 14, angle = 90, margin = margin(l = 2)))
```

## Percent High Risk Inspections - Roving Stations (2024)

```{r perc_hr_inspections roving}
all_dat |> 
  dplyr::mutate(Station = str_replace_all(Station, " ","\n")) |> 
  make_bar_with_lbls(
  y_var_label = "Total Inspections",
  fill_var = "Station",
  station_filter = str_replace_all(roving_stations, " ","\n"),
  year_filter = 2024,
  # year_filter = c((this_year-1):this_year),
  label_cutoff = 0,
  highlight_field = "High_Risk_AIS_Ind",
  ggplotify = F,
  add_sep_lines = T
) + theme(strip.text = element_text(size = 14, angle = 90, margin = margin(l = 2)))
```

## Percent High Risk Inspections - Boat Launches (2024)

```{r}
all_dat |> 
  dplyr::filter(str_detect(Station,'Boat Launch')) |> 
  dplyr::mutate(Station = str_remove_all(Station,"Boat Launch - ")) |> 
  dplyr::filter(!Station %in% c("Multiple")) |> 
  dplyr::mutate(Station = str_replace(Station,"Boat Launch","Unspecified Boat Launch")) |> 
  dplyr::mutate(Station = str_replace_all(Station, " ","\n")) |> 
  make_bar_with_lbls(
    y_var_label = "Total Inspections",
    fill_var = "Station",
    label_cutoff = 0,
    station_filter = 'none',
    year_filter = 2024,
    # year_filter = c(2023:most_rec_year),
    highlight_field = "High_Risk_AIS_Ind",
    ggplotify = F,
    add_sep_lines = T
  ) + theme(strip.text = element_text(size = 14, angle = 90, margin = margin(l = 2)))
```

## Percent High Risk Inspections - Scheduled Inspections (2024)

```{r perc_hr_inspections scheduled_inspections}
all_dat |> 
  filter(str_detect(Station, 'Scheduled')) |> 
  mutate(Station = str_remove_all(Station, 'Scheduled Inspection \\(')) |> 
  dplyr::mutate(Station = str_replace(Station,"\\/","\n")) |> 
  mutate(Station = str_remove_all(Station, '\\)$')) |> 
  make_bar_with_lbls(
    y_var_label = "Total Inspections",
    label_cutoff = 0,
    fill_var = "Station",
    station_filter = 'none',
    year_filter = 2024,
    # year_filter = c(2023:most_rec_year),
    highlight_field = "High_Risk_AIS_Ind",
    ggplotify = F,
    add_sep_lines = T
  ) + theme(strip.text = element_text(size = 14, angle = 90, margin = margin(l = 2)))
```

```{r}

## Radium - Decontaminations

if(interactive()){
  rad = all_dat |> dplyr::filter(Station == 'Radium')
  
  rad |> 
    dplyr::count(Year,Decontamination_Performed_Ind) |> 
    pivot_wider(names_from = Decontamination_Performed_Ind, values_from = n)
}
```

## Radium - Percent High-risk by Year (2016 - 2022)

```{r}
# Look across all years, where are all inspections coming from, and % of high risk for each of those.
rad = all_dat |> dplyr::filter(Station == 'Radium')

make_bar_with_lbls(
  data = all_dat |> dplyr::mutate(Year = factor(Year, levels = c(2015:2024))),
  y_var_label = 'Total Inspections',
  fill_var = "Year",
  x_var = "Year",
  reorder_x_by_y = F,
  station_filter = 'Radium',
  ggplotify = F,
  year_filter = 2016:2024,
  label_cutoff = 10,
  highlight_field = "High_Risk_AIS_Ind",
  add_sep_lines = T
)
```

## Radium - Percent High-risk by Month (2016 - 2022)

```{r}
total_dat = rad |> 
  dplyr::mutate(Month = lubridate::month(TimeOfInspection,label=T,abbr=F)) |> 
  dplyr::mutate(Month = factor(Month, levels = month.name)) |> 
  dplyr::count(Month)

highlight_dat = rad |> 
  dplyr::filter(High_Risk_AIS_Ind) |> 
  dplyr::mutate(Month = lubridate::month(TimeOfInspection,label=T,abbr=F)) |> 
  dplyr::mutate(Month = factor(Month, levels = month.name)) |> 
  dplyr::count(Month, name = 'HR')

ggplot_fig = total_dat |> 
  dplyr::left_join(highlight_dat) |> 
  dplyr::mutate(HR = tidyr::replace_na(HR,0)) |> 
  ggplot(aes(x = Month, group = Month)) + 
  geom_col(aes(y=n), fill = 'red', position='dodge') + 
  geom_col(aes(y=n-HR, fill = Month), position='dodge') + 
  geom_col(aes(y=n-HR), fill = 'white', alpha = 0.6, position='dodge') + 
  geom_text(position=position_dodge(width = .9),
            aes(y = n + 0.05*max(n), group = Month, label = ifelse(
              HR/n == 1,
              paste0(100*round(HR/n,3),"% (",Month,")"),
              paste0(100*round(HR/n,3),"%")))
  ) + 
  scale_fill_brewer(palette = 'Set3') +
  big_text +
  labs(y = 'Total Inspections', x = '') +
  guides(fill = guide_legend(override.aes = list(alpha = 0.6))) + 
  theme(axis.text.x = element_text(angle = 90))


plotly::ggplotly(
  ggplot_fig,
  width = 1000,
  height = 600) |> 
  plotly::config(displayModeBar = F, staticPlot = T)
```

## Radium - Percent High-risk by Day of Week (2016 - 2022)

```{r}
total_dat = rad |> 
  dplyr::mutate(DOW = lubridate::wday(TimeOfInspection,label=T)) |> 
  dplyr::mutate(DOW = factor(DOW, levels = lubridate::wday(c(1:7), label = T))) |> 
  dplyr::count(DOW)

highlight_dat = rad |> 
  dplyr::filter(High_Risk_AIS_Ind) |> 
  dplyr::mutate(DOW = lubridate::wday(TimeOfInspection,label=T)) |> 
  dplyr::mutate(DOW = factor(DOW, levels = lubridate::wday(1:7, label = T))) |> 
  dplyr::count(DOW, name = 'HR')

ggplot_fig = total_dat |> 
  dplyr::left_join(highlight_dat) |> 
  dplyr::mutate(HR = tidyr::replace_na(HR,0)) |> 
  ggplot(aes(x = DOW, group = DOW)) + 
  geom_col(aes(y=n), fill = 'red', position='dodge') + 
  geom_col(aes(y=n-HR, fill = DOW), position='dodge') + 
  geom_col(aes(y=n-HR), fill = 'white', alpha = 0.6, position='dodge') + 
  geom_text(position=position_dodge(width = .9),
            aes(y = n + 0.05*max(n), group = DOW, label = ifelse(
              HR/n == 1,
              paste0(100*round(HR/n,3),"% (",DOW,")"),
              paste0(100*round(HR/n,3),"%")))
  ) + 
  scale_fill_brewer(palette = 'Set3') +
  big_text +
  labs(y = 'Total Inspections', x = '', fill = 'Day') +
  guides(fill = guide_legend(override.aes = list(alpha = 0.6))) + 
  theme(axis.text.x = element_text(angle = 90))


plotly::ggplotly(
  ggplot_fig,
  width = 1000,
  height = 600) |> 
  plotly::config(displayModeBar = F, staticPlot = T)
```

## Radium - Source Jurisdiction (2016 - 2022)

```{r}
rad |> 
  dplyr::rename(srce = Previous_Waterbody_1_Province_Or_State) |> 
  dplyr::mutate(srce = as.factor(srce)) |> 
  dplyr::group_by(Year) |> 
  dplyr::mutate(srce = forcats::fct_lump(srce, n = 4)) |> 
  dplyr::ungroup() |> 
  make_bar_with_lbls(
    year_filter = 2016:2024,
    y_var_label = 'Total Inspections',
    x_var = 'srce',
    fill_var = 'Year',
    station_filter = 'Radium',
    label_cutoff = 15,
    ggplotify = F,
    add_sep_lines = T
  )
```

## Radium - Source Jurisdiction HR (2016 - 2022)

```{r}
all_dat |> 
  dplyr::filter(High_Risk_AIS_Ind) |> 
  dplyr::rename(srce = Previous_Waterbody_1_Province_Or_State) |> 
  dplyr::mutate(srce = as.factor(srce)) |> 
  dplyr::group_by(Year) |> 
  dplyr::mutate(srce = forcats::fct_lump(srce, n = 4)) |> 
  dplyr::ungroup() |> 
  make_bar_with_lbls(
    year_filter = 2016:2024,
    y_var_label = 'High Risk Inspections',
    x_var = 'srce',
    fill_var = 'Year',
    station_filter = 'Radium',
    label_cutoff = 15,
    ggplotify = F,
    add_sep_lines = T
  )
```

## Previously Inspected (Out of Province)

```{r}
d |> 
  dplyr::filter(High_Risk_AIS_Ind) |> 
  dplyr::filter(Previous_Inspection_Ind) |> 
  dplyr::filter(Previous_Waterbody_1_Province_Or_State != "BC") |> 
  dplyr::rename(Previous_Jurisdiction = Previous_Waterbody_1_Province_Or_State) |> 
  dplyr::count(Previous_Jurisdiction, name = "count", sort = T) |> 
  dplyr::mutate(Previous_Jurisdiction = as.factor(Previous_Jurisdiction)) |> 
  dplyr::mutate(Previous_Jurisdiction = forcats::fct_inorder(Previous_Jurisdiction)) |> 
  ggplot(aes(x = Previous_Jurisdiction, y = count)) + 
  geom_col() + 
  geom_text(aes(y = count/2, label = count), col = 'white') +
  labs(x = "Source Jurisdiction", y = "Number of High-risk Watercraft") +
  big_text
```

## Max Inspections per Day

```{r max_insp_per_day}

# Make text labels showing number of inspections and date

text_labels = max_per_day |> 
  dplyr::filter(!Station %in% roving_stations) |> 
  dplyr::mutate(Station = stringr::str_replace_all(Station, " \\(","\n(")) |> 
  dplyr::mutate(label = paste0(n,"\n(",Month," ",Day,")")) |> 
  dplyr::group_by(Station) |> 
  dplyr::slice(1) |> 
  dplyr::ungroup()

max_per_day |> 
  dplyr::filter(!Station %in% roving_stations) |> 
  dplyr::group_by(Station) |> 
  dplyr::slice(1) |> 
  dplyr::ungroup() |> 
  tidyr::uncount(weights = n) |> 
  make_bar_with_lbls(
    y_var_label = "Max Inspections per Day",
    fill_var = "Station",
    station_filter = 'none',
    year_filter = 2024,
    label_cutoff = 0,
    ggplotify = F
  ) + 
  geom_text(aes(x = Station, y = n + 0.075*max(text_labels$n), label = label), data = text_labels)
```

## Max Inspections per Day - Roving Stations

```{r}

text_labels = max_per_day |> 
  dplyr::filter(Station %in% roving_stations) |> 
  dplyr::mutate(Station = stringr::str_replace_all(Station, " \\(","\n(")) |> 
  dplyr::mutate(label = paste0(n,"\n(",Month," ",Day,")")) |> 
  dplyr::group_by(Station) |> 
  dplyr::slice(1) |> 
  dplyr::ungroup()

max_per_day |> 
  dplyr::filter(Station %in% roving_stations) |> 
  tidyr::uncount(weights = n) |> 
  make_bar_with_lbls(
    y_var_label = "Max Inspections per Day",
    fill_var = "Station",
    station_filter = 'none',
    year_filter = 2024,
    label_cutoff = 0,
    ggplotify = F
  ) + 
  geom_text(aes(x = Station, y = n + 0.075*max(text_labels$n), label = label), data = text_labels)
```

## Compliance by Station

```{r compliance_by_station}
compliance_dat = tibble(
  Station = c("Mt. Robson","Osoyoos","Olsen (Hwy 3)","Yahk","Radium","Dawson Creek","Golden","Pacific","Average Compliance"),
  `2017` = c(0.97,0.95,NA,0.73,0.75,0.88,0.76,0.48,0.77),
  `2018` = c(0.97,1,0.9,0.84,0.85,0.94,0.85,0.58, 0.81),
  `2019` = c(0.98,1,0.93,0.89,0.89,0.93,0.85,0.6, 0.83),
  `2020` = c(0.966,0.87,0.884,0.884,0.838,NA,0.863,0.666,0.877),
  `2021` = c(0.98,0.98,0.91,0.89,0.88,0.88,0.86,0.75,0.874),
  `2022` = c(0.97,0.99,0.92,NA,0.88,0.92,0.89,0.59,0.880),
  `2023` = c(0.97,1,0.885,0.9,NA,0.94,0.87,0.59,0.88),
  `2024` = c(0.984,0.996,0.870,0.901,NA,0.961,0.921,0.792,0.907)
)

compliance_table = compliance_dat |> 
  mutate(across(-Station, \(x) ifelse(!is.na(x), paste0(100*x,'%'), x))) |> 
  as.data.frame()

compliance_trendline = compliance_dat[nrow(compliance_dat),] |> 
  pivot_longer(-Station, names_to = 'Year') |> 
  ggplot() + 
  geom_line(aes(x = Year, y = value, group = 1), col = 'purple', linewidth = 2) + 
  scale_y_continuous(limits = c(0.7,1), labels = scales::percent) + 
  labs(y = "Average \nCompliance") + 
  big_text

compliance_delta = compliance_dat[,ncol(compliance_dat)] - compliance_dat[,(ncol(compliance_dat)-1)]
compliance_colours = ifelse(compliance_delta > 0,
                                         "green",
                                         "red")
compliance_colours[is.na(compliance_colours)] <- "black"

compliance_table_k = kableExtra::kbl(compliance_table, format = "html", table.attr = "style='width:50%';font-size=10px;") |> 
  kableExtra::kable_paper(full_width = T) |> 
  kableExtra::kable_minimal() |> 
  kableExtra::column_spec(ncol(compliance_table), 
                          color = compliance_colours)
```

::: {.fragment .fade-in-then-out .absolute}
```{r}
compliance_table_k
```

```{r fig.height = 2.5}
compliance_trendline
```
:::

## Total Inspections, Blowbys, and Compliance by Station (2024)

```{r}
blowb = vroom::vroom("C:/Users/CMADSEN/Downloads/metabase_2024_blowbys.csv") |> 
  purrr::set_names(snakecase::to_snake_case) |> 
  dplyr::mutate(observer_work_flow_id = as.character(observer_work_flow_id))

# Get station name through link with observer workflow id 

blowb = blowb |> 
  dplyr::mutate(observer_work_flow_id = as.numeric(observer_work_flow_id)) |> 
  left_join(
    d |> 
      dplyr::select(Workflow_ID,
                   Station) |> 
      dplyr::rename(observer_work_flow_id = Workflow_ID) |> 
      dplyr::distinct()
  ) |> 
  dplyr::filter(!is.na(Station))
```

```{r}
# Maybe add a slide after this one that shows Compliance by Station for 2024, shows the number of inspections, number of blowbys, and percentage compliance (3 columns).
additional_rows = d |> 
  dplyr::mutate(Station = case_when(
    Station == 'Pacific Border' ~ 'Pacific',
    str_detect(Station,"Osoyoos") ~ 'Osoyoos',
    T ~ Station
  )) |> 
  dplyr::count(Station, name = "Total Inspections") |> 
  dplyr::add_row(Station = "Average Compliance", `Total Inspections` = nrow(d)) |> 
  # Bring blowbys in
  dplyr::left_join(
    blowb |> 
      dplyr::mutate(Station = case_when(
        Station == 'Pacific Border' ~ 'Pacific',
        str_detect(Station,"Osoyoos") ~ 'Osoyoos',
        T ~ Station
      )) |> 
      dplyr::mutate(motorized = ifelse(watercraft_complexity != 'Non-motorized',"motorized","nonmotorized")) |> 
      dplyr::count(Station,motorized) |> 
      tidyr::pivot_wider(names_from = motorized, values_from = n) |> 
      dplyr::mutate(across(everything(),\(x) ifelse(is.na(x),0,x)))
  )
    
compliance_dat = compliance_dat |> 
  dplyr::select(Station,`2024`) |> 
  dplyr::rename(Compliance = `2024`) |> 
  dplyr::filter(Station != "Radium") |> 
  dplyr::mutate(Compliance = paste0(100*Compliance,"%")) |> 
  dplyr::left_join(additional_rows)

compliance_dat[nrow(compliance_dat),]$motorized = sum(compliance_dat$motorized,na.rm=T)
compliance_dat[nrow(compliance_dat),]$nonmotorized = sum(compliance_dat$nonmotorized,na.rm=T)

compliance_dat |> 
  dplyr::rename(`Motorized Blowbys` = motorized,
                `Non-motorized Blowbys` = nonmotorized) |> 
  knitr::kable()
```

## Mussel Fouled by Month

```{r mf_by_month}
mf_by_m = tibble(
  Month = month.name[c(4:11)],
  `2017` = c(1,5,5,4,2,4,4,0),
  `2018` = c(3,5,5,4,2,4,2,0),
  `2019` = c(1,4,4,6,1,5,0,1),
  `2020` = c(0,2,2,7,2,1,2,0),
  `2021` = c(1,6,3,2,3,1,1,0),
  `2022` = c(0,2,4,2,3,1,0,0),
  `2023` = c(1,1,5,3,0,2,2,0),
  `2024` = c(4,2,0,2,2,0,0,0)
)

mf_p = mf_by_m |> 
  pivot_longer(cols = -Month) |> 
  dplyr::filter(name %in% c(2020:2024), Month != 'November') |> 
  mutate(Month = factor(Month, levels = c(month.name))) |> 
  ggplot() + 
  geom_col(aes(x = Month, y = value, fill = name), position = position_dodge2(preserve = 'total')) + 
  facet_wrap( ~ Month, nrow = 1, scales = 'free_x', strip.position = "bottom") + 
  big_text +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.border = element_rect(color = 'grey', fill = 'transparent'),
        strip.text = element_text(size = 13),
        strip.clip = "off") +
  labs(fill = 'Year', y = 'Mussel Fouled Boats')

mf_p
# ggplotly(mf_p,
#          height = 600,
#          width = 1000)
```

## Mussel Fouled -- Source and Destination

```{r mf_source_and_dest}
# pie chart 1: source provinces/states.

pie_1 = make_pie(mf_dat, 'big_source_summary') + 
  labs(title = "Source Province/State")

# pie chart 2: destination regions in BC.

pie_2 = mf_dat |> 
  make_pie('big_dest_summary') + 
  labs(title = 'Destination Region')

ggpubr::ggarrange(pie_1, pie_2, ncol = 2, nrow = 1)
```

## Mussels - Commercially Hauled and Days out of Water

```{r mussels_ch_and_days_water}
# Pie chart 1: Commercially hauled
pie_1 = mf_dat |> 
  select(commercially_hauled_ind) |> 
  mutate(commercially_hauled_ind = ifelse(commercially_hauled_ind,"Yes","No")) |> 
  mutate(commercially_hauled_ind = replace_na(commercially_hauled_ind, 'Unknown')) |> 
  make_pie('commercially_hauled_ind') + 
  labs(title = 'Commercially Hauled')

# Pie chart 2: Days out of Water
pie_2 = mf_dat |> 
  select(prev = previous_waterbody_1_days_out_of_water) |> 
  mutate(prev = as.character(prev)) |> 
  mutate(prev = replace_na(prev, 'Unknown')) |> 
  mutate(prev = replace(prev, prev == '30 days to 6 months', '30 days to\n6 months')) |> 
  mutate(prev = ifelse(prev == '> 1 year', 'Greater than 1 year', prev)) |> 
  make_pie('prev') + 
  labs(title = 'Days out of Water')

ggpubr::ggarrange(pie_1, pie_2, ncol = 2, nrow = 1)

```

## Mussels - Intercepting Station

```{r}
pie_3 = mf_dat |> 
  # filter(Year == most_rec_year) |> 
  select(station) |> 
  dplyr::mutate(station = ifelse(
    station == "Scheduled Inspection (CBSA notification)",
    "Scheduled Inspection\n(CBSA notification)",
    station)) |> 
  ungroup() |> 
  make_pie('station')

pie_3
```

```{r}
prevs = all_dat |> 
  filter(Year == most_rec_year) |> 
  filter(Dreissenid_mussels_found_during_previous_inspection)

prevs_mf = prevs |> 
  filter(!MusselsFound_Ind) |> 
  summarise(n = n()) |> 
  pull(n)
```

## Mussels Found Previously, CDD on Inspection in BC

Total Such Inspections: `r prevs_mf`.

```{r mussels_found_prev_insp}
# Pie chart 1: source state/province
pie_1 = prevs |> 
  filter(!MusselsFound_Ind) |> 
  ungroup() |> 
  make_pie('Previous_Waterbody_1_Province_Or_State') + 
  labs(title = 'Source Province/State')

# Pie chart 2: Destination region in BC
pie_2 = prevs |> 
  filter(!MusselsFound_Ind) |> 
  mutate(big_dest_summary = coalesce(Destination_Waterbody_1_Name,
                                    Destination_Waterbody_1_Closest_City,
                                    Destination_Major_City)) |>
  select(big_dest_summary) |> 
  # filter(!str_detect(big_dest_summary,'Ontario')) |> 
  mutate(dest_region = case_when(
    big_dest_summary %in% c('Charlie Lake') ~ 'Northeast',
    big_dest_summary %in% c('Christina Lake near Grand Forks') ~ 'Kootenay-Boundary',
    str_detect(big_dest_summary,'(Kelowna|Okanagan|Osoyoos|Shuswap|Lake Country)') ~ 'Thompson-Okanagan',
    str_detect(big_dest_summary,'Ocean') ~ 'Pacific Ocean \n(Vancouver Island)',
    big_dest_summary %in% c('Ocean Pacific BC near Richmond','Squamish, British Columbia, CAN','Fraser River at Richmond') ~ 'Lower Mainland',
    # T ~ paste0('Unknown \n(',big_dest_summary,')')
    T ~ 'Thompson-Okanagan'
  )) |> 
  ungroup() |> 
  make_pie('dest_region') + 
  labs(title = 'Destination Region')

ggpubr::ggarrange(pie_1, pie_2, ncol = 2, nrow = 1)

```

## Mussels Found Previously, CDD on Inspection in BC

Total Such Inspections: `r prevs_mf`.

```{r mf_prev_insp_station_in_bc}
# Pie chart 3: Station where previously inspected by was intercepted in BC
pie_3 = all_dat |> 
  filter(!MusselsFound_Ind) |> 
  filter(Year == most_rec_year) |> 
  filter(Dreissenid_mussels_found_during_previous_inspection) |> 
  select(Station) |> 
  ungroup() |> 
  make_pie('Station') + 
  labs(title = "Intercepting Station")

pie_4 = all_dat |> 
  filter(!MusselsFound_Ind) |> 
  filter(Year == most_rec_year) |> 
  filter(Dreissenid_mussels_found_during_previous_inspection) |> 
  select(Previous_Inspection_Source_Name) |> 
  dplyr::mutate(Previous_Inspection_Source_Name = ifelse(Previous_Inspection_Source_Name == 'Olsen Hwy 3', NA, Previous_Inspection_Source_Name)) |> 
  dplyr::mutate(Previous_Inspection_Source_Name = tidyr::replace_na(Previous_Inspection_Source_Name, 'Unknown')) |> 
  ungroup() |> 
  make_pie('Previous_Inspection_Source_Name') + 
  labs(title = "Previous Inspection Station")

ggpubr::ggarrange(pie_3, pie_4, ncol = 2, nrow = 1)

```

## Watercraft from Snake River, Idaho - All Years

```{r}
sn_r_d = all_dat |> 
  # filter(Year == 2023) |>
  filter(stringr::str_detect(Previous_Waterbody_1_Name,'Snake'),
         Previous_Waterbody_1_Province_Or_State == 'ID') |> 
  mutate(Destination_Waterbody_1_Name = case_when(
    Destination_Waterbody_1_Name == 'No Match' ~ 'Not Specified',
    is.na(Destination_Waterbody_1_Name) ~ 'Not Specified',
    T ~ Destination_Waterbody_1_Name
  )) |>
  count(Year, Station, Destination_Waterbody_1_Name, Destination_Waterbody_1_Closest_City, Destination_Waterbody_1_Province_Or_State,
         sort = T, name = 'Number of Inspections') |> 
  arrange(desc(Year)) |> 
  rename('Dest WB Name' = Destination_Waterbody_1_Name,
         'Dest WB Closest City' = Destination_Waterbody_1_Closest_City, 
         'Dest WB Prov/State' = Destination_Waterbody_1_Province_Or_State)

sn_r_d |> 
  dplyr::count(Year, `Dest WB Prov/State`, name = 'Watercraft from Snake River') |> 
  knitr::kable()
```

## Snake River, Idaho - Interactive Table

```{r }
sn_r_d |> 
  # dplyr::select(-'Dest WB Prov/State') |> 
  DT::datatable(options = list(
  headerCallback = DT::JS(
    "function(thead) {",
    "  $(thead).css('font-size', '0.8em');",
    "}"
  )
))
```

```{r}
dfo = d |> 
  dplyr::ungroup() |> 
  dplyr::filter(Shift_Start_Comment == 'DFO/BC joint shift' | Shift_End_Comment == 'DFO/BC join shift')
```

## DFO / Peace Arch Crossing - Inspections by Shift

```{r}
# Add Shift Date below 

dfo |> 
  dplyr::mutate(date_of_insp = lubridate::date(TimeOfInspection)) |> 
  dplyr::mutate(Workflow_ID = paste0(date_of_insp)) |> 
  # mutate(the_day = lubridate::wday(TimeOfInspection,label=T)) |> 
  dplyr::count(High_Risk_AIS_Ind, Workflow_ID) |> 
  mutate(High_Risk_AIS_Ind = ifelse(High_Risk_AIS_Ind,'High Risk','Low Risk')) |> 
  ggplot() + 
  geom_col(aes(x = Workflow_ID,y = n,fill=High_Risk_AIS_Ind)) +
  big_text + 
  labs(x = "Shift Date", y = "Number of Inspections",
       fill = 'High or Low Risk') + 
  scale_fill_manual(values = c("Low Risk" = "lightblue"))
```

## DFO / Peace Arch Crossing - Inspections by Hour

```{r}
dfo |> 
  mutate(the_hour = lubridate::hour(TimeOfInspection)) |> 
  dplyr::count(High_Risk_AIS_Ind, the_hour) |> 
  mutate(High_Risk_AIS_Ind = ifelse(High_Risk_AIS_Ind,'High Risk','Low Risk')) |> 
  ggplot() + 
  geom_col(aes(x = the_hour,y = n,fill=High_Risk_AIS_Ind)) +
  big_text + 
  labs(x = "Hour of Day", y = "Number of Inspections",
       fill = 'High or Low Risk') + 
  scale_fill_manual(values = c("Low Risk" = "lightblue"))
```

## DFO / Peace Arch Crossing - Source Jurisdictions

```{r}
# Pie chart 1: source state/province
pie_1 = dfo |> 
  ungroup() |> 
  make_pie('Previous_Waterbody_1_Province_Or_State') + 
  labs(title = 'Source Province/State')

pie_1
```

## DFO / Peace Arch Crossing - Destination Regions

```{r}
# Pie chart 2: Destination region in BC
pie_2 = dfo |> 
  mutate(big_dest_summary = coalesce(
    Destination_Waterbody_1_Name,
    Destination_Waterbody_1_Closest_City,
    Destination_Major_City)
  ) |>
  select(big_dest_summary) |> 
  # filter(!str_detect(big_dest_summary,'Ontario')) |> 
  mutate(dest_region = case_when(
    big_dest_summary %in% c('Charlie Lake') ~ 'Northeast',
    big_dest_summary %in% c('Christina Lake near Grand Forks') ~ 'Kootenay-Boundary',
    str_detect(big_dest_summary,'(Kelowna|Okanagan|Osoyoos|Shuswap|Lake Country)') ~ 'Thompson-Okanagan',
    str_detect(big_dest_summary,'Ocean') ~ 'Pacific Ocean \n(Vancouver Island)',
    big_dest_summary %in% c('Ocean Pacific BC near Richmond','Squamish, British Columbia, CAN','Fraser River at Richmond') ~ 'Lower Mainland',
    # T ~ paste0('Unknown \n(',big_dest_summary,')')
    T ~ 'Thompson-Okanagan'
  )) |> 
  ungroup() |> 
  make_pie('dest_region') + 
  labs(title = 'Destination Region')

pie_2
```

## Pull the Plug Compliance - Fast Facts

Note: pull the plug compliance calculated for inspections after June 18th, 2024 (first date of inspector recording drainplug information was June 19th, 2024).

```{r}
# What date did we add the drainplug field? Looks like maybe 2024-06-19.
drainplugs_summary = d |> 
  dplyr::mutate(the_month = lubridate::month(Start_Time),
                the_day = lubridate::day(Start_Time)) |> 
  dplyr::filter(the_month == 6 & the_day >= 19 | the_month >= 7) |> 
  dplyr::mutate(Watercraft_Has_Drainplugs_Ind = ifelse(
    Drainplug_Removed_at_Inspection_Ind == T,
    T,
    Watercraft_Has_Drainplugs_Ind
  ))
  
dp_tbl = drainplugs_summary |> 
  dplyr::ungroup() |> 
  dplyr::count(Watercraft_Has_Drainplugs_Ind, Drainplug_Removed_at_Inspection_Ind, name = 'count') |> 
  dplyr::rename(`Drainplugs Present` = Watercraft_Has_Drainplugs_Ind,
                `Drainplugs Removed` = Drainplug_Removed_at_Inspection_Ind) |> 
  dplyr::group_by(`Drainplugs Present`) |> 
  dplyr::mutate(compliance_percentage = scales::percent(count / sum(count))) |> 
  dplyr::ungroup()

wc_with_dp = scales::comma(sum(dp_tbl[dp_tbl$`Drainplugs Present`,]$count))

wc_with_dp_p = scales::percent(sum(dp_tbl[dp_tbl$`Drainplugs Present`,]$count)/(sum(dp_tbl$count)))

wc_dp_not_rm = scales::comma(dp_tbl[dp_tbl$`Drainplugs Removed`,]$count)

wc_dp_not_rm_p = dp_tbl[dp_tbl$`Drainplugs Removed`,]$compliance_percentage
```

###### `r wc_with_dp` of inspected watercraft were recorded to have drainplugs (`r wc_with_dp_p` of watercraft inspections after June 18th, 2024).

###### Of these watercraft, `r wc_dp_not_rm` were compliant in having removed drainplug(s) upon arrival at station (`r wc_dp_not_rm_p`).

## Pull the Plug Compliance - by Station

Note: Scheduled Inspections, 'Other' Station, and Fraser Valley Roving removed due to low inspection number.

```{r}
plug_summary = drainplugs_summary |> 
    dplyr::filter(Station %in% permanent_stations) |> 
  dplyr::rename("Drainplug<br>Removed" = Drainplug_Removed_at_Inspection_Ind) |> 
  dplyr::filter(!(Station %in% c("Other","Fraser Valley Roving") | stringr::str_detect(Station,"Scheduled Inspection"))) |> 
  dplyr::mutate(Watercraft_Has_Drainplugs_Ind = ifelse(
    Watercraft_Has_Drainplugs_Ind,
    "Has Drainplugs",
    "No Drainplugs"
  )) |> 
  dplyr::count(Station,Watercraft_Has_Drainplugs_Ind, `Drainplug<br>Removed`, name = 'count')

plug_summary = plug_summary |> 
  dplyr::group_by(Watercraft_Has_Drainplugs_Ind) |> 
  mutate(`Drainplug<br>Removed` = as.character(`Drainplug<br>Removed`)) |> 
  mutate(`Drainplug<br>Removed` = factor(`Drainplug<br>Removed`,
                                                      levels = c("FALSE","TRUE"))) |> 
  group_by(Watercraft_Has_Drainplugs_Ind,
           `Drainplug<br>Removed`) |> 
  mutate(y_pos = (count))

plug_sum_w_plugs = plug_summary |> 
  dplyr::filter(Watercraft_Has_Drainplugs_Ind == 'Has Drainplugs')
  
# Add y_pos field
plug_sum_w_plugs = plug_sum_w_plugs |> 
  dplyr::group_by(Station) |> 
  dplyr::mutate(station_max = sum(count)) |> 
  dplyr::ungroup() |> 
  dplyr::mutate(y_pos = 1.05*max(station_max))

# Calculate percentages
plug_sum_percentages = plug_sum_w_plugs |> 
  dplyr::group_by(Station) |> 
  dplyr::mutate(percentage = paste0(100*round(count / sum(count),2),'%')) |> 
  dplyr::ungroup() |> 
  dplyr::filter(`Drainplug<br>Removed` == TRUE) |> 
  dplyr::select(Station, Watercraft_Has_Drainplugs_Ind, 
                `Drainplug<br>Removed`, y_pos, percentage) |> 
  dplyr::distinct()

w_with_plugs = plug_sum_w_plugs |> 
  ggplot(
    aes(x = reorder(Station,-count), y = count, 
        fill = `Drainplug<br>Removed`, 
        label = count)
  ) +
  geom_bar(stat = "identity") +
  geom_text(aes(x = Station, y = y_pos, label = percentage), data = plug_sum_percentages) +
  labs(x = 'Station') +
  big_text +
  theme(legend.position = 'bottom',
        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
  
ggplotly(w_with_plugs,
         width = 1000,
         height = 600)
  
```

## Pull the Plug Compliance - by Month

```{r}
compl_by_month = drainplugs_summary |> 
  dplyr::rename("Drainplug<br>Removed" = Drainplug_Removed_at_Inspection_Ind) |> 
  dplyr::filter(!(Station %in% c("Other","Fraser Valley Roving") | stringr::str_detect(Station,"Scheduled Inspection"))) |> 
  dplyr::filter(Watercraft_Has_Drainplugs_Ind) |> 
  dplyr::mutate(the_month = lubridate::month(TimeOfInspection, label = T)) |> 
  dplyr::count(the_month, `Drainplug<br>Removed`, name = 'count') |> 
  dplyr::mutate(the_month = factor(the_month, levels = month(1:12, label = T))) |> 
  dplyr::group_by(the_month)

perc_compl_by_month = compl_by_month |> 
  dplyr::group_by(the_month) |> 
  dplyr::reframe(perc = paste0(100*round(count / sum(count),2),"%"),
                   `Drainplug<br>Removed`) |> 
  dplyr::ungroup() |> 
  dplyr::left_join(compl_by_month) |> 
  dplyr::group_by(the_month) |> 
  dplyr::mutate(y_level = sum(count)) |> 
  dplyr::ungroup() |> 
  dplyr::mutate(y_level = 1.1*max(y_level)) |> 
  dplyr::select(-count) |> 
  dplyr::filter(`Drainplug<br>Removed`)

compl_by_month |> 
  ggplot(
    aes(x = the_month, y = count, 
        fill = `Drainplug<br>Removed`, 
        label = count)
  ) +
  geom_bar(stat = "identity") +
  geom_text(size = 4, position = position_stack(vjust = 0.5),
            data = compl_by_month |> dplyr::filter(the_month != 'Oct')) +
  geom_text(aes(x = the_month, y = y_level, label = perc), data = perc_compl_by_month) + 
  labs(x = 'Station', fill = "Drainplug Removed") +
  big_text +
  theme(legend.position = 'bottom',
        axis.text.x = element_text(angle = 90))
```

## Pull the Plug Compliance - by Source Jurisdiction

```{r}
compl_by_sj = drainplugs_summary |> 
  dplyr::ungroup() |> 
  dplyr::rename("Drainplug<br>Removed" = Drainplug_Removed_at_Inspection_Ind) |> 
  dplyr::select(prev_j = Previous_Waterbody_1_Province_Or_State,
                Watercraft_Has_Drainplugs_Ind,
                `Drainplug<br>Removed`) |> 
  dplyr::filter(Watercraft_Has_Drainplugs_Ind) |> 
  dplyr::mutate(prev_j = forcats::fct_lump(prev_j, n = 10)) |> 
  dplyr::count(prev_j,
               `Drainplug<br>Removed`,
               name = "count", 
               sort = T) |>  
  dplyr::group_by(prev_j) |> 
  dplyr::mutate(total_c = sum(count)) |> 
  dplyr::ungroup() |> 
  dplyr::arrange(dplyr::desc(total_c)) |> 
  dplyr::mutate(prev_j = as.factor(prev_j)) |> 
  dplyr::mutate(prev_j = forcats::fct_inorder(prev_j))
  
perc_compl_by_sj = compl_by_sj |> 
  dplyr::group_by(prev_j) |> 
  dplyr::reframe(perc = paste0(100*round(count / sum(count),2),"%"),
                   `Drainplug<br>Removed`) |> 
  dplyr::ungroup() |> 
  dplyr::filter(`Drainplug<br>Removed`) |> 
  dplyr::distinct()

y_level_for_plot = 1.1*max(compl_by_sj$total_c)
  
ggplot(compl_by_sj)  +
  geom_col(aes(x = prev_j,
               y = count, 
               fill = `Drainplug<br>Removed`)) +
  geom_text(aes(x = prev_j, y = y_level_for_plot, label = perc),
            data = perc_compl_by_sj) +
  big_text +
  theme(legend.position = 'bottom') + 
  labs(x = "Previous Jurisdiction", fill = "Drainplug Removed")
```

## Blowby Timing - Across All Stations

```{r}
blowb |> 
  dplyr::select(blow_by_time) |> 
  mutate(blow_by_char = as.character(blow_by_time)) |> 
  mutate(hours = stringr::str_extract(blow_by_char,"[0-9]{1,2}:.*")) |> 
  mutate(hours = lubridate::hms(hours)) |> 
  dplyr::mutate(the_hour = lubridate::hour(hours)) |> 
  dplyr::count(the_hour) |> 
  ggplot() + 
  geom_col(aes(x = the_hour, y = n)) +
  labs(x = "Hour of Day", y = "Number of Blowbys") +
  big_text
```

## Blowby Timing - By Station

```{r}
blowby_by_station = blowb |> 
  dplyr::select(Station,blow_by_time) |> 
  # dplyr::filter(!Station %in% c()) |> 
  dplyr::filter(!stringr::str_detect(Station,'Scheduled')) |>
  mutate(blow_by_char = as.character(blow_by_time)) |> 
  mutate(hours = stringr::str_extract(blow_by_char,"[0-9]{1,2}:.*")) |> 
  mutate(hours = lubridate::hms(hours)) |> 
  dplyr::mutate(the_hour = lubridate::hour(hours)) |> 
  dplyr::count(the_hour,Station)

blowby_by_station |> 
  ggplot() + 
  geom_col(aes(the_hour,y=n,fill = Station)) + 
  facet_wrap( ~ Station) + 
  theme(legend.position = 'none') + 
  labs(y = "Number of Blowbys",
       x = "Hour of Day") + 
  big_text + 
  theme(legend.position = 'none')
```

## Blow Bys Divided by Total Inspections

```{r}
insp_by_station = d |> 
  dplyr::select(Station,TimeOfInspection) |> 
  # dplyr::filter(!Station %in% c()) |> 
  dplyr::filter(!stringr::str_detect(Station,'Scheduled')) |>
  mutate(toi_by_char = as.character(TimeOfInspection)) |> 
  mutate(hours = stringr::str_extract(toi_by_char,"[0-9]{1,2}:.*")) |> 
  mutate(hours = lubridate::hms(hours)) |> 
  dplyr::mutate(the_hour = lubridate::hour(hours)) |> 
  dplyr::count(the_hour,Station,name = 'inspections')

blowbys_by_total_insp_fig = blowby_by_station |> 
  dplyr::rename(blowbys = n) |> 
  dplyr::left_join(insp_by_station) |>
  dplyr::group_by(the_hour) |> 
  dplyr::summarise(blowbys = sum(blowbys),
                   inspections = sum(inspections)) |> 
  dplyr::ungroup() |> 
  dplyr::mutate(blowby_by_insp = round(blowbys / inspections,3)) |> 
  ggplot() + 
  geom_col(aes(x=the_hour, 
               y = blowby_by_insp)) + 
  labs(y = "# Blowbys / # Inspections", x = "Hour of Day") + 
  scale_y_continuous(labels = scales::percent_format()) + 
  big_text + 
  theme(legend.position = 'none')

ggplotly(blowbys_by_total_insp_fig,
         width = 1000,
         height = 600)
```

## Blow Bys Divided by Total Inspections, by Station

```{r}
blowbys_by_total_insp_station_fig = blowby_by_station |> 
  dplyr::rename(blowbys = n) |> 
  dplyr::left_join(insp_by_station) |>
  dplyr::mutate(blowby_by_insp = round(blowbys / inspections,3)) |> 
  ggplot() + 
  geom_col(aes(x=the_hour, 
               y = blowby_by_insp,
               fill = Station)) + 
  facet_wrap( ~ Station) + 
  labs(y = "# Blowbys / # Inspections", x = "Hour of Day") + 
  scale_y_continuous(labels = scales::percent_format()) +
  big_text + 
  theme(legend.position = 'none')

ggplotly(blowbys_by_total_insp_station_fig,
         width = 1000,
         height = 600)
```

## COS Inbox Summary (2022 - 2024)

```{r}

# non-2024 data
cos_d = openxlsx::read.xlsx("J:/2 SCIENCE - Invasives/SPECIES/Zebra_Quagga_Mussel/Communications/Inspection data reporting/Final report/2023/GIS Maps and Excel Figures/2023_CBSA_sorting_results_MB.xlsx",
                            sheet = "summary_figure")

# 2024
cos_24 = openxlsx::read.xlsx("J:/2 SCIENCE - Invasives/SPECIES/Zebra_Quagga_Mussel/Communications/Inspection data reporting/Final report/2024/GIS Maps and Excel Figures/ExcelFigures/COS inbox notifications 2024.xlsx",
                            sheet = "sorted")

cos_24 = cos_24[,c(6,7)]

names(cos_24) = c("category","2024")

cos_24 = cos_24 |> 
  dplyr::filter(!is.na(`2024`))

cbsa_24 = cos_24 |> 
  dplyr::filter(stringr::str_detect(category,"CBSA")) |> 
  dplyr::mutate(Location = stringr::str_remove_all(category,
                                                   "CBSA ")) |> 
  dplyr::mutate(Location = stringr::str_squish(Location)) |> 
  dplyr::mutate(Location = ifelse(Location == 'Rooseville',
                                  'Roosville',
                                  Location)) |> 
  dplyr::mutate(Location = stringr::str_to_title(Location)) |> 
  dplyr::select(-category)

cos_d = cos_d |> 
  dplyr::full_join(cbsa_24) |> 
  dplyr::mutate(dplyr::across(dplyr::everything(), \(x) tidyr::replace_na(x, 0)))

cos_d |> 
  tidyr::pivot_longer(-Location) |> 
  dplyr::filter(name %in% c("2022","2023","2024")) |> 
  ggplot() + 
  geom_col(aes(x = Location, y = value, fill = name),
           position = position_dodge2()) +
  facet_wrap( ~ Location, nrow = 1, scales = 'free_x', strip.position = "bottom") + 
  big_text +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.border = element_rect(color = 'grey', fill = 'transparent'),
        strip.text = element_text(size = 13, angle = 45, hjust = 1, vjust = 1),
        strip.clip = "off") + 
  labs(y = 'Number of Notifications',
       fill = "Year",
       x = "CBSA Crossing Locations")
```

## Whirling Disease - by Station (2024)

Note: these inspections are all inspections flagged to be "High_Risk_Area_Ind".

```{r}
# Not sure which field to use! High_Risk_Area_Ind?
wdd = d |> 
  dplyr::filter(High_Risk_Area_Ind)

wdd |> 
  dplyr::count(Station,sort = T) |> 
  dplyr::mutate(Station = stringr::str_replace(Station,"Scheduled Inspection","Sched. Insp.")) |> 
  dplyr::mutate(Station = as.factor(Station)) |> 
  dplyr::mutate(Station = forcats::fct_inorder(Station)) |> 
  dplyr::mutate(the_label = ifelse(n < 0.05*max(n), n, NA)) |> 
  ggplot(aes(x = Station, y = n)) + 
  geom_col() + 
  geom_text(aes(y = 0.1*max(n), label = the_label)) +
  labs(y = "Watercraft from High-risk Areas\n for Whirling Disease") +
  big_text + 
  theme(axis.text.x = ggtext::element_markdown())
```

## Whirling Disease - by Source (2024)

```{r}
wdd |> 
  dplyr::rename(prevj = Previous_Waterbody_1_Province_Or_State) |> 
  dplyr::count(prevj,sort = T) |> 
  dplyr::mutate(prevj = as.factor(prevj)) |> 
  dplyr::mutate(prevj = forcats::fct_inorder(prevj)) |> 
  dplyr::mutate(the_label = ifelse(n < 0.05*max(n), n, NA)) |> 
  ggplot(aes(x = prevj, y = n)) + 
  geom_col() + 
  geom_text(aes(y = 0.1*max(n), label = the_label)) +
  labs(y = "Watercraft from High-risk Areas\n for Whirling Disease",
       x = "Previous Jurisdiction") +
  big_text
```

```{r}
## Additional Assessments

# <a href = "data/2024_metabase_data_exploration.html" style = "font-size: xx-large">Data Gaps Assessment (2024)</a>

```

## Commercially Hauled by Station

```{r}

all_dat |> 
  dplyr::filter(Commercially_Hauled_Ind) |> 
  dplyr::filter(Station %in% permanent_stations) |> 
make_bar_with_lbls(
  y_var_label = "Commercially Hauled Inspections\nPermanent Stations 2024",
  year_filter = 2024,
  fill_var = "Station",
  station_filter = 'none',
  label_cutoff = 10,
  ggplotify = T
  )

```
